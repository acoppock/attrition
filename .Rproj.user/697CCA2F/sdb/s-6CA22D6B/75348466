{
    "collab_server" : "",
    "contents" : "## Levendusky Double Sampling\nrm(list=ls())\nsetwd(\"~/Documents/Dropbox/Columbia/Collaboration/Work for Don/Double sampling/Levendusky_Replications/\")\nlibrary(attrition)\nsource(\"programs/estimator_ds.r\")\nsource(\"../sampling-package-12-2-14.R\")\nsource(\"programs/two-sampling-trimming-bounds.R\")\nload(\"data/levendusky_mturk.rdata\")\nload(\"data/levendusky_gfk.rdata\")\n\nlibrary(ggplot2)\nlibrary(car)\nlibrary(xtable)\nlibrary(dplyr)\nlibrary(attrition)\n\n\n# Based only on round 1\nfit_1 <- lm(L_dif_w2 ~ Z_Levendusky, subset(levendusky_mturk, Z_Levendusky != \"placebo\" & R1 ==1))\nfit_1_r <- commarobust(fit_1)\nfit_1_li <- fit_1_r[2,1] - 1.96*fit_1_r[2,2]\nfit_1_ui <- fit_1_r[2,1] + 1.96*fit_1_r[2,2]\n\ncis_1 <- estimator_ev(Y = L_dif_w2, Z = Z1, R = R1, minY = 0, maxY = 6,\n                      data = subset(levendusky_mturk, !is.na(Z1)))\n\ncis_2 <- estimator_trim(Y = L_dif_w2, Z = (1-as.numeric(as.character((Z1)))), R = R1,\n                        data = subset(levendusky_mturk, !is.na(Z1)))\n\n# Based on rounds 1 and 2\n\nfit_2 <- lm(L_dif_w2 ~ Z_Levendusky, subset(levendusky_mturk, Z_Levendusky != \"placebo\"))\nfit_2_r <- commarobust(fit_2)\nfit_2_li <- fit_2_r[2,1] - 1.96*fit_2_r[2,2]\nfit_2_ui <- fit_2_r[2,1] + 1.96*fit_2_r[2,2]\n\n\ncis_3 <- estimator_ev(Y = L_dif_w2, Z = Z1, R = as.numeric(!is.na(L_dif_w2)), minY = 0, maxY = 6,\n             data = subset(levendusky_mturk, !is.na(Z1)))\n\ncis_4 <- estimator_trim(Y = L_dif_w2, Z = (1-as.numeric(as.character((Z1)))),\n                        R = as.numeric(!is.na(L_dif_w2)),\n                        data = subset(levendusky_mturk, !is.na(Z1)))\n\n# Using the double sampling\n\ncis_5 <- estimator_ds(Y = L_dif_w2, Z = Z1, R1 = R1, Attempt = Attempt, R2 = R2, minY = 0, maxY = 6,\n                      data = subset(levendusky_mturk, !is.na(Z1)))\n\ncis_6 <- estimator_ds(Y = L_dif_w2, Z = Z1, R1 = R1, Attempt = Attempt, R2 = R2,\n                      strata = pid_3_recoded, minY = 0, maxY = 6,\n                      data = subset(levendusky_mturk, !is.na(Z1)))\n\ncis_7 <- estimator_trim(Y = L_dif_w2, Z = Z1, R1 = R1, R2 = R2, Attempt = Attempt,\n                        data = subset(levendusky_mturk, !is.na(Z1)))\n\n\n\n\n\nlength(c(NA, cis_1[4], cis_2[1], cis_3[4], NA, cis_4[1], cis_5[4], cis_6[4], cis_7[1]))\n\nmturk_gg <- data.frame(lis =            c(fit_1_li, cis_1[1], NA, fit_2_li, cis_3[1],  NA, cis_5[1], cis_6[1], NA),\n                       uis =            c(fit_1_ui, cis_1[2], NA, fit_2_ui, cis_3[2],  NA, cis_5[2], cis_6[2], NA),\n                       point_estimate = c(fit_1_r[2,1], NA, NA,  fit_2_r[2,1],NA, NA, NA, NA, NA),\n                       low_est =        c(NA, cis_1[3], -1*cis_2[2], NA, cis_3[3], -1*cis_4[2], cis_5[3], cis_6[3], cis_7[2]),\n                       high_est =       c(NA, cis_1[4], -1*cis_2[1], NA, cis_3[4], -1*cis_4[1], cis_5[4], cis_6[4], cis_7[1]),\n                       sample = rep(c(\"Round 1 Only\", \"Both Rounds\"), times = c(3, 6)),\n                       estimator =      c(\"Naive\", \"EVB\", \"Trim (Lee)\",\"Naive\", \"EVB\", \"Trim (Lee)\",\"DS\", \"DS + PS\", \"Trim\"),\n                       Study = \"Polarization: Mturk\")\n\n\nmturk_gg <- mutate(mturk_gg,\n                   estimator = factor(estimator, levels = c(\"Naive\", \"EVB\", \"Trim (Lee)\",\"DS\", \"DS + PS\", \"Trim\")),\n                   study = factor(sample, levels = c(\"Round 1 Only\", \"Both Rounds\")))\n\n\ng <-\n\n  ggplot(mturk_gg, aes(x= estimator, color=estimator)) +\n  geom_linerange(aes(ymax=uis, ymin=lis), size=1.5) +\n  geom_point(aes(y=high_est), size=3) +\n  geom_point(aes(y=low_est), size=3) +\n  geom_point(aes(y=point_estimate), size=3) +\n  facet_wrap(~sample) +\n  theme_bw() + theme(axis.title.y=element_blank())\n\ng\n\nggsave(\"estimators_plot.pdf\", g, height = 7, width = 10)\n\nwrite.csv(mturk_gg, file = \"estimators_table.csv\", row.names = FALSE)\ng\n\n\n\n\n\n\n\n\n# Test against original code ----------------------------------------------\n\n\nestimator_ev(Y = L_dif_w2, Z = Z1, R = as.numeric(!is.na(L_dif_w2)), minY = 0, maxY = 6,\n             data = subset(levendusky_mturk, !is.na(Z1)))\n\nestimator.ev(Y=\"L_dif_w2\", Z = \"Z1\", R1 = \"R1\",\n             minY = 0, maxY = 6, alpha = 0.05,\n             data = subset(levendusky_mturk, !is.na(Z1)))\n\nestimator_ds(Y = L_dif_w2, Z = Z1, R1 = R1, Attempt = Attempt, R2 = R2, minY = 0, maxY = 6,\n             data = subset(levendusky_mturk, !is.na(Z1)))\n\nestimator.ds(Y=\"L_dif_w2\", Z = \"Z1\", R1 = \"R1\", Attempt = \"Attempt\",\n                     R2 = \"R2\", minY = 0, maxY = 6, alpha = 0.05,\n                     data = subset(levendusky_mturk, !is.na(Z1)))\n\nestimator_ds(Y = L_dif_w2, Z = Z1, R1 = R1, Attempt = Attempt, R2 = R2,\n             strata = pid_3_recoded, minY = 0, maxY = 6,\n             data = subset(levendusky_mturk, !is.na(Z1)))\n\nestimator.ds(Y=\"L_dif_w2\", Z = \"Z1\", R1 = \"R1\", Attempt = \"Attempt\",\n                     R2 = \"R2\", minY = 0, maxY = 6, alpha = 0.05, strata=\"pid_3_recoded\",\n                     data = subset(levendusky_mturk, !is.na(Z1)))\n\n# Trim --------------------------------------------------------------------\n\nestimator_trim(Y = L_dif_w2, Z = Z1,\n               R1 = R1, R2 = R2, Attempt = Attempt, data = subset(levendusky_mturk, !is.na(Z1)))\n\n\nlevendusky_mturk_subset <- filter(levendusky_mturk, Z_Levendusky != \"placebo\")\nlevendusky_mturk_subset <-  within(levendusky_mturk_subset, {\n\n  Out <- L_dif_w2\n  Out[is.na(L_dif_w2)] <- -99\n\n  Treat <- as.numeric(Z_Levendusky == \"polarized\")\n  Fail <- as.numeric(is.na(L_dif_w2))\n\n  Weight <- rep(NA, nrow(levendusky_mturk_subset))\n\n  Weight[R1==1] <- 1\n  Weight[Attempt==1 & Treat ==1] <- sum(Treat == 1 & R1 == 0)/sum(Treat == 1 & Attempt == 1)\n  Weight[Attempt==1 & Treat ==0] <- sum(Treat == 0 & R1 == 0)/sum(Treat == 0 & Attempt == 1)\n})\n\nwith(filter(levendusky_mturk_subset, R1 == 1 | Attempt == 1),\n                       returnbounds(Out = Out, Treat = Treat, Fail = Fail, Weight = Weight))\n\n\n",
    "created" : 1452194058869.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3482055159",
    "id" : "75348466",
    "lastKnownWriteTime" : 1452201599,
    "last_content_update" : 1452201600737,
    "path" : "~/Documents/Dropbox/Columbia/Collaboration/Work for Don/Double sampling/Levendusky_Replications/programs/levendusky_analysis_ds_with_package.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}